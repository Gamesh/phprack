<?xml version="1.0" ?>
<!--
 *
 * phpRack: Integration Testing Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt. It is also available
 * through the world-wide-web at this URL: http://www.phprack.com/LICENSE.txt
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@phprack.com so we can send you a copy immediately.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @copyright Copyright (c) phpRack.com
 * @version $Id$
 * @category phpRack
 *
 * This Phing build file. For more information see this document:
 * http://phing.info/docs/guide/current/
 *
-->

<project name="phpRack tests" basedir="." default="main">

    <!-- Sets the DSTAMP, TSTAMP and TODAY properties -->
    <tstamp/>

    <includepath classpath="${project.basedir}" />
    <includepath classpath="${project.basedir}/test/" />

    <!-- To make sure that we have enough memory limit for running all tests -->
    <php expression="ini_set('memory_limit', '128M');" />

    <!-- Packaging properties -->
    <property name="package.name" value="phpRack-stable" />
    <property name="build.tgz" value="${project.basedir}/build/${package.name}.tgz" />

    <target name="main" depends="lint, jslint, phpcs, phpmd, test, zca, jscoverage" >
    </target>

    <!-- get revision number -->
    <svnlastrevision
        workingcopy="${project.basedir}"
        propertyname="svn.lastrevision"/>

    <target name="lint" description="Run syntax check for all classes" >
        <phplint haltonfailure="yes" level="verbose">
            <fileset dir="${project.basedir}">
                <include name="**/*.php"/>
                <include name="**/*.html"/>
                <include name="**/*.phtml"/>
                <exclude name=".svn/**"/>
                <exclude name="build/**"/>
            </fileset>
        </phplint>
    </target>

    <target name="jslint" description="Validate syntax in all JS files" >
        <jsllint haltonfailure="true">
            <fileset dir="${project.basedir}">
                <include name="**/index.js"/>
                <exclude name="build/**"/>
            </fileset>
        </jsllint>
    </target>

    <target name="phpcs" description="Validate the quality of PHP code with PHPCS utility">
        <exec command="phpcs
            -n
            --report=full
            --standard=Zend
            --ignore='.svn/*;build/**'
            --extensions='php,phtml'
            ${project.basedir}"
            escape="false"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <target name="phpmd" description="PHP Mess Detector (PHPMD)">
        <exec command="phpmd
            ${project.basedir}
            text
            codesize,unusedcode
            --extensions='php,phtml'"
            escape="false"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <target name="zca" description="Zend Code Analyzer">
        <zendcodeanalyzer analyzerPath="zca" haltonwarning="true">
            <fileset dir="${project.basedir}">
                <include name="**/*.php" />
                <include name="**/*.phtml" />
                <exclude name=".svn/**" />
                <exclude name="build/**"/>
            </fileset>
        </zendcodeanalyzer>
    </target>

    <target name="jscoverage" description="JSCoverage">
        <exec command="jscoverage
    		-v
    		--exclude=.svn
    		--exclude=jquery-1.4.2.min.js
    		${project.basedir}/phpRack/layout/js
    		${project.basedir}/build/instrumented-js"
            escape="false"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <target name="test" description="Run all existing unit-tests">
        <property name="coverage.database" value="${project.basedir}/build/coverage.data" />

        <!-- create coverage database that will collect all reports -->
        <coverage-setup database="${coverage.database}">
            <fileset dir="${project.basedir}/phpRack">
                <include name="**/*.php"/>
                <exclude name=".svn/**"/>
                <exclude name="build/**"/>
            </fileset>
        </coverage-setup>

		<phpunit printsummary="yes" haltonerror="yes" haltonfailure="yes" codecoverage="true">
			<formatter type="plain" usefile="no" />
			<batchtest>
				<fileset dir="${project.basedir}/test">
					<include name="**/*Test*.php"/>
					<exclude name="**/Abstract*.php"/>
					<exclude name="**/_*.php"/>
					<exclude name=".svn/**"/>
					<exclude name="**/integration-tests/**"/>
                    <exclude name="build/**"/>
				</fileset>
			</batchtest>
		</phpunit>

        <!-- build coverage report -->
        <mkdir dir="${project.basedir}/build/coverage"/>
        <coverage-report outfile="${project.basedir}/build/coverage.xml">
            <report todir="${project.basedir}/build/coverage" />
        </coverage-report>

        <!-- make sure that the code is covered -->
        <coverage-threshold database="${coverage.database}"
            perProject="70"
            perClass="0"
            perMethod="0"
        />

        <!-- delete coverage database, since it's not necessary any more -->
        <delete file="${coverage.database}" />
    </target>

    <target name="package" description="Package the product into TGZ">
        <tar destfile="${build.tgz}" compression="gzip">
            <fileset dir="${project.basedir}">
                <include name="phpRack/**" />
                <include name="LICENSE.txt" />
                <exclude name=".svn/**" />
                <exclude name="build/**"/>
            </fileset>
        </tar>
    </target>

    <target name="doc" description="Generate phpDocumentor files">
        <php expression="define('PHPRACK_PATH', '${project.basedir}/phpRack');"/>
        <php expression="set_error_handler(create_function('', 'return true;'));"/>
        <phpdoc title="API Documentation, rev.${svn.lastrevision}"
            destdir="${project.basedir}/build/apidocs"
            sourcecode="false" quiet="true"
            output="HTML:frames:default">
            <fileset dir="${project.basedir}/phpRack">
                <include name="**/*.php" />
            </fileset>
            <projdocfileset dir=".">
                <include name="README.txt" />
                <include name="LICENSE.txt" />
            </projdocfileset>
        </phpdoc>
    </target>

    <target name="deploy" description="Deploy stable TGZ by FTP and other files" depends="doc">
        <!-- get FTP properties from file -->
        <property file="${project.basedir}/../external.properties" />

		<echo message="uploading PHP code to the server..." />
		<ftpdeploy host="${ftp.host}" username="${ftp.username}" password="${ftp.password}"
		    clearfirst="true" port="${ftp.port}">
			<fileset dir="${project.basedir}">
				<include name="phpRack/**"/>
				<exclude name=".svn/**" />
			</fileset>
			<fileset dir="${project.basedir}/test">
				<include name="integration-tests/**"/>
				<exclude name=".svn/**" />
			</fileset>
		</ftpdeploy>

		<echo message="uploading public files to the server..." />
		<ftpdeploy host="${ftp.host}" username="${ftp.username}" password="${ftp.password}"
			dir="./public" clearfirst="true" port="${ftp.port}">
			<fileset dir="${project.basedir}/phprack.com">
				<include name="**/*"/>
				<exclude name=".svn/**" />
			</fileset>
			<fileset dir="${project.basedir}/phpRack/layout">
				<include name="logo.png"/>
			</fileset>
			<fileset dir="${project.basedir}/">
				<include name="LICENSE.txt"/>
			</fileset>
		</ftpdeploy>

		<echo message="uploading API..." />
		<ftpdeploy host="${ftp.host}" username="${ftp.username}" password="${ftp.password}"
			dir="./public/api" clearfirst="true" port="${ftp.port}">
			<fileset dir="${project.basedir}/build/apidocs">
				<include name="**/*"/>
			</fileset>
		</ftpdeploy>

		<echo message="uploading coverage map..." />
		<ftpdeploy host="${ftp.host}" username="${ftp.username}" password="${ftp.password}"
			dir="./public/coverage" clearfirst="true" port="${ftp.port}">
			<fileset dir="${project.basedir}/build/coverage">
				<include name="**/*"/>
			</fileset>
		</ftpdeploy>
	</target>

</project>
